// Code generated by go-bindata.
// sources:
// service.template
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\x4d\x6f\xe3\x36\x13\x3e\x8b\xbf\x62\x5e\xe3\x5d\x40\x5a\x38\xcc\x3d\x0b\x1f\x5a\x6f\xb6\xc8\x61\x93\x60\x93\x9e\x0b\x85\x1a\xa9\x82\x15\x52\x1d\xd2\x69\x02\x81\xff\xbd\xe0\x87\x3e\xac\xd8\x86\x13\x64\xdb\x5c\x22\x93\xf3\xf1\x70\xe6\x99\x67\xba\xee\x0c\xfe\xff\x90\x6b\xbc\x43\x7a\xaa\x05\xc2\xc5\x0a\xf8\x75\xfe\x88\x60\x2d\xf3\x97\x3a\x5c\xdc\xe6\x62\x93\x57\xe1\xfe\x96\x94\x51\xfd\xc1\xd4\x0e\xc9\xbb\x5e\xac\xa0\xa5\x5a\x9a\x12\x16\x9f\xf4\x9d\x3f\x5f\xec\x8f\xba\xdf\xbc\x16\xd8\xdb\x9f\x59\xcb\xce\xcf\x61\xad\x0a\x84\x0a\x25\x52\x6e\xb0\x80\x87\x17\x68\x1d\x06\x71\x56\xa1\x3c\x0b\x99\x39\x7c\xbd\x81\xeb\x9b\x7b\xb8\xfc\x7a\x75\xcf\x59\x1b\xe1\x75\x1d\x8f\x48\xad\x65\xac\x7e\x6c\x15\x19\x48\x19\x00\xc0\x42\x28\x69\xf0\xd9\x2c\xc2\xaf\x5a\x2d\x58\xd7\x01\xe5\xb2\x42\xe0\x57\xde\x52\x3b\xc0\xee\xb6\xeb\x78\x84\x8e\xb2\x70\x91\xbc\x4b\xa5\x54\xd5\x20\xaf\x54\x93\xcb\x8a\x2b\xaa\xce\x2b\x6a\xc5\xb9\x50\x05\xea\x05\x4b\x0e\xdd\x6b\x93\x9b\xad\x5e\xb0\x8c\xf9\x88\x75\x09\xfc\x5b\x4d\xda\xb8\xb8\xe6\xa5\x45\x70\x56\x97\x44\x8a\xa0\x96\x06\xa9\xcc\x05\x42\xe7\x53\xba\x42\xa4\x19\xf8\x0c\xdc\xfd\x60\x96\xb1\x72\x2b\x05\x10\x9a\x2d\xc9\xdf\x7e\xdc\xae\xbd\x67\x8a\x44\x80\xee\x2b\x0b\xff\xa0\x63\x49\x5d\x42\x85\x44\x4b\x50\x1b\x57\x75\x24\xe2\xe9\x90\x2b\xfb\xe2\x8e\x3b\x96\x24\x21\x14\x04\x98\x3c\x84\x73\x7e\x3c\x64\x5f\x7a\xc7\x70\x9c\x65\x2c\xb1\x8c\xed\x75\x09\x20\x7f\x97\x1b\xa9\xfe\x96\x33\xa7\x9d\x5a\xfa\x37\x77\xdd\x84\x42\xd6\x82\x36\xb4\x15\x26\x3e\x5b\x3f\x89\xde\x20\xb2\xc6\x5a\x36\x7a\xee\xf2\xc9\xda\x9d\xb2\xb9\x44\xb1\xa9\xdf\xd1\xfc\xa9\x0a\xdd\xb3\xb0\x2e\x21\x97\x05\xf0\x40\xd1\x3b\x43\x98\x3f\xd6\xb2\x02\xbe\x6e\x6a\x94\x66\x3c\x18\x49\x10\x52\xa7\xda\x5f\x4d\x20\x0d\x1c\xe3\x5d\x37\x9d\x27\x6b\xff\x18\xbc\x42\x9a\xd8\x8e\xf0\xfe\x46\xa3\x6f\xff\x1c\xc1\xab\x84\xc2\x3c\x43\xa4\x2b\x5f\x87\xff\x4b\x20\xfc\x0b\x3e\xbb\x38\xe3\xf8\xf0\x4f\x7a\x01\xfc\x4a\xb6\x5b\xc3\x6f\x37\x55\xff\xd9\xcf\x52\x06\xe9\xae\xfd\x7a\x4b\x5a\xb9\xe9\xbc\xd9\x9a\xa9\xe1\x32\x72\x67\x17\xe6\x81\xba\xfc\x8a\x55\x2d\x8f\x62\xf5\x79\xe3\x3d\xbd\x8e\xfd\x13\x9f\xbb\xd7\x21\x3e\xd6\x7b\x1c\x7d\xb8\xe7\x67\xfc\x02\x4f\xb9\x51\x21\xee\x5f\x5a\xfc\x8e\x26\x2f\x72\x93\x7b\x9d\xea\x67\x79\xda\x4c\xf4\x6e\x3d\x4d\x7b\x0d\x0c\x55\x7f\x35\xdc\xd7\xf8\x6c\xd2\x0c\x1e\x94\x6a\xc2\xb0\x6f\x89\x50\xba\xa3\xcf\xce\xd9\xc1\xf5\x04\x1b\xb5\xd4\x59\x5d\x12\xa5\x3d\xa9\x76\xc0\x4e\x3e\x0f\x0e\xc1\x9b\x66\xc0\xeb\x4c\xaa\xe7\xa3\x9a\x7d\xe8\x60\xc4\x5a\x38\xf9\xba\x58\x81\xe6\xfa\x49\xf0\x79\xfc\xcc\x9b\xd4\xa5\xb7\xfa\xdf\x0a\x64\xdd\x44\x37\xf7\x17\xb5\x68\x8f\x20\x06\xbf\xa8\xde\xd1\x4c\xd6\x4d\x5f\xb6\x23\x34\x8f\x1d\xec\x29\xbc\xbf\x75\x6f\x25\x67\xe8\x59\x90\xf5\xc7\xb6\x41\xe3\xa4\xfd\xfd\x8c\xf5\x81\x72\x29\xb0\x49\xb3\x61\x2d\xfc\x4b\xed\x0a\x43\x3d\x76\x6c\x26\x09\x21\x4f\x3f\xca\x7e\x6b\xcc\xbb\x37\xac\x9d\xbd\x7d\x4b\x2c\x4b\x0a\x2c\x91\x80\xf8\xf0\x46\x96\x94\x61\xaf\x25\x62\x4c\x1f\x32\xfd\x40\xf1\x94\x66\x2c\xe9\xd3\xac\x56\x50\x2b\x7e\x79\xf3\xcd\x9b\x27\x0f\x84\xf9\x86\x25\x89\x1d\x9a\x3e\xc3\x72\x1c\x8c\x5f\x79\x89\x8f\x0b\xc4\x7d\xef\xc5\x24\xd9\x5b\xe2\xc4\xed\xa9\xdb\xe1\x05\x6e\xcd\xf6\x6c\x78\x47\x99\x58\xc4\x15\x0b\x71\x87\xb2\xf8\x45\x16\xeb\x46\x69\x4c\x5d\x9e\xf7\xc5\x3c\x3c\x2c\x33\xe1\x38\x4d\x26\xde\x2e\xe5\x4b\xf8\x30\xae\x8a\xe5\x71\x75\x19\x69\xea\x77\xce\x87\x88\x8d\x23\xaa\xe0\x51\xe0\x47\x6f\xe5\x50\x08\x3e\x08\xfd\x70\xb1\xcb\x66\xd7\xc4\x54\x8d\xb7\x87\xc0\x9c\x02\x28\x80\x9a\x40\x8b\xc1\x3c\x10\xbf\x4b\xbe\xfc\x04\x59\x3d\x8d\x16\xff\xfd\xda\xef\xe5\x6c\x3a\x90\x73\x96\x08\xf3\x7c\x3a\x31\x64\xdd\x2c\x4f\xad\x59\xc8\x3a\xa9\xdc\x7c\x8f\xff\x13\x00\x00\xff\xff\xdc\xd2\x47\x97\xae\x0d\x00\x00")

func serviceTemplateBytes() ([]byte, error) {
	return bindataRead(
		_serviceTemplate,
		"service.template",
	)
}

func serviceTemplate() (*asset, error) {
	bytes, err := serviceTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.template", size: 3502, mode: os.FileMode(420), modTime: time.Unix(1531806673, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service.template": serviceTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"service.template": &bintree{serviceTemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

