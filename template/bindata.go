// Code generated by go-bindata.
// sources:
// service.template
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x6f\xe3\x36\x10\x3d\x8b\xbf\x62\x6a\x74\x01\x69\xe1\x65\xee\xbb\xf0\xa1\xf5\x66\x8b\x1c\x36\x09\x36\xb9\x17\x0c\x35\x56\x89\x28\xa4\x3a\xa4\x83\x04\x02\xff\x7b\xc1\x0f\xc9\xb2\x62\x07\x4e\xda\x62\x73\xb1\x44\xce\xc7\x9b\x99\x37\x4f\xe9\xfb\x4f\xf0\xeb\x9d\xb0\x78\x83\xf4\xa8\x24\xc2\xe7\x15\xf0\x4b\xf1\x80\xe0\x3d\x8b\x97\x36\x5d\x5c\x0b\x79\x2f\x9a\x74\x7f\x4d\xc6\x99\xe1\x60\x6a\x87\x14\x5d\x3f\xaf\xa0\x23\xa5\xdd\x06\x16\x1f\xec\x4d\x3c\x5f\x1c\x8e\x7a\xd8\x5c\x49\x1c\xec\x3f\x79\xcf\xce\xce\xd6\xa6\x46\x68\x50\x23\x09\x87\x35\x7c\xbd\x82\xcb\xab\x5b\x38\xff\x7a\x71\xcb\xba\x0c\xa3\xef\x79\x46\xe4\x3d\x63\xea\xa1\x33\xe4\xa0\x64\x00\x00\x0b\x69\xb4\xc3\x27\xb7\x48\x6f\xca\x2c\x58\xdf\x03\x09\xdd\x20\xf0\x8b\x68\x69\x03\xb0\x70\xdb\xf7\x3c\x43\x44\x5d\x87\x48\xd1\xa5\x31\xa6\x69\x91\x37\xa6\x15\xba\xe1\x86\x9a\xb3\x86\x3a\x79\x26\x4d\x8d\x76\xc1\x8a\x63\xf7\xd6\x09\xb7\xb5\x0b\x56\xb1\x18\x51\x6d\x80\x7f\x53\x64\x5d\x88\xeb\x9e\x3b\x84\x60\x75\x4e\x64\x08\x94\x76\x48\x1b\x21\x11\xfa\x98\x32\x54\x5c\x56\x10\x33\xf0\xf0\xc2\x3c\x63\x9b\xad\x96\x40\xe8\xb6\xa4\xff\xf8\x71\xbd\x8e\x9e\x25\x12\x01\x86\xa7\x2a\xfd\x40\xcf\x0a\xb5\x81\x06\x89\x96\x60\xee\x43\x77\x91\x88\x97\x63\xae\xea\x4b\x38\xee\x59\x51\xa4\x50\x90\x60\xf2\x14\x2e\xf8\xf1\x94\x7d\x19\x1d\xd3\x71\x55\xb1\xc2\x33\x76\xd0\x25\x81\xbc\x08\x15\x68\xd1\xce\xbc\xf6\x9a\x19\x8b\xee\xfb\x09\x57\xbc\x07\xeb\x68\x2b\x5d\xae\xdb\x3e\xca\xc1\x20\xd3\xc3\x7b\xb6\xf3\xdc\x27\x8e\xf7\x7b\x7d\x0b\x89\xf2\x54\xbf\xa3\xfb\xcb\xd4\x76\xa0\x5b\xe8\x7c\xe2\xe1\x8d\x23\x14\x0f\x4a\x37\x93\x81\xa7\x2c\xa5\x74\x4f\x90\x99\xc2\xd7\xe9\x77\x09\x84\x7f\xc3\xc7\x10\x62\xc7\x50\xfe\xc1\x2e\x80\x5f\xe8\x6e\xeb\xf8\xf5\x7d\x33\x3c\x0e\x74\xad\xa0\xdc\xb7\x5f\x6f\xc9\x9a\xb0\x00\x57\x5b\x37\x35\x5c\xe6\xb1\xa5\x06\xb5\x16\x23\xcc\x75\xab\x50\xbb\x17\x30\x7f\xc7\x46\xe9\x57\xb1\xc6\xbc\xf9\x9e\x5e\xc6\xfe\x1f\xcb\x3d\xe8\x90\x8b\x8d\x1e\xaf\x16\x1e\x99\x91\x9f\x20\x0e\x7b\xb7\x9c\xb7\xcf\x1d\x7e\x47\x27\x6a\xe1\x44\x94\x82\x43\xc3\xc4\xe8\x36\x10\x64\x90\x99\xd4\xf5\x17\x7b\x75\x89\x4f\xae\xac\xe0\xce\x98\x36\xed\xd9\x96\x08\x75\x38\xfa\x18\x9c\x03\x5c\xef\xf9\x24\x4e\xb4\x3a\x27\x2a\xf3\x7a\xb1\x3d\xb0\x93\xc7\xa3\xf4\x3b\x36\xd6\x8c\x78\x18\xd9\x61\xa8\x6f\x1d\x46\xc2\x98\x14\xe4\xa1\x6b\xd1\x05\x15\x79\xff\x84\x62\x20\xa1\x25\xb6\x65\x35\x2a\x50\x69\xe7\x3b\x5c\x4d\x78\x65\x63\x8d\x93\x25\x1e\x65\x99\xf7\xfd\xf4\x53\xe3\xfd\x9f\xa3\x57\x9a\xe7\x4e\xc1\x42\xde\x44\xe2\xa0\x5f\x96\xdb\x47\xc9\x67\x2b\x90\xf2\x0c\xd4\x8d\x02\xa5\x36\xd1\xe3\x97\x15\x68\xd5\x4e\x15\xee\x80\x66\x46\x3d\x2b\x6a\xdc\x20\x01\xf1\xb1\x46\x56\x6c\x92\x84\x16\x72\x97\x3e\x65\xfa\x81\xf2\xb1\xac\x58\x31\xa4\x59\xad\x40\x19\x7e\x7e\xf5\x2d\x9a\x17\x77\x84\xe2\x9e\x15\x85\x1f\x77\x79\x86\xe5\x75\x30\x51\x5d\x8b\x18\x17\x88\xc7\xd9\xcb\x49\xb2\xb7\xc4\xc9\x42\x6d\xbb\xb1\x82\xa0\xe8\x03\x1b\xde\xd1\x26\x96\x71\xe5\x46\xdc\xa0\xae\x7f\xd3\xf5\xba\x35\x16\xcb\x90\xe7\x7d\x31\xb3\x81\x56\xed\xb0\x53\x83\x06\xce\xa4\xda\xfb\x53\x78\xf7\x76\xe9\x5a\xc2\x7f\xc6\x55\x39\xe3\xea\x71\x9a\x46\x8d\x4d\x8b\x35\xef\x19\xe4\xbf\xd7\x3a\x17\xee\xf3\x7f\x25\x81\xa8\x92\x67\x41\xdb\x79\x9b\x80\x42\xf2\x51\xd8\xc6\x8b\x7d\x36\x87\x21\x96\x66\x77\x7b\x0c\xcc\x29\x80\x12\xa8\x09\xb4\x1c\x2c\x02\x89\xda\xf9\xe5\x5f\x55\x7a\x98\x29\xa7\xd1\xe2\xe7\x7f\xe6\x06\x39\x9b\x2e\xe4\x9c\x25\xd2\x3d\x9d\x4e\x0c\xad\xda\xe5\xa9\x3d\x4b\x59\x27\x9d\x9b\x7f\xb7\xfe\x09\x00\x00\xff\xff\x79\x29\x36\x16\x01\x0c\x00\x00")

func serviceTemplateBytes() ([]byte, error) {
	return bindataRead(
		_serviceTemplate,
		"service.template",
	)
}

func serviceTemplate() (*asset, error) {
	bytes, err := serviceTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.template", size: 3073, mode: os.FileMode(420), modTime: time.Unix(1531431839, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service.template": serviceTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"service.template": &bintree{serviceTemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

